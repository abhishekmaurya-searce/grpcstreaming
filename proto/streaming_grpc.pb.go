// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: streaming.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamingServiceClient is the client API for StreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamingServiceClient interface {
	UnaryExample(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	ServerStreamingExample(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (StreamingService_ServerStreamingExampleClient, error)
	ClientStreamingExample(ctx context.Context, opts ...grpc.CallOption) (StreamingService_ClientStreamingExampleClient, error)
	BidirectionalStreamingExample(ctx context.Context, opts ...grpc.CallOption) (StreamingService_BidirectionalStreamingExampleClient, error)
}

type streamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingServiceClient(cc grpc.ClientConnInterface) StreamingServiceClient {
	return &streamingServiceClient{cc}
}

func (c *streamingServiceClient) UnaryExample(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/gRPCGreet.StreamingService/UnaryExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamingServiceClient) ServerStreamingExample(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (StreamingService_ServerStreamingExampleClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[0], "/gRPCGreet.StreamingService/ServerStreamingExample", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceServerStreamingExampleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamingService_ServerStreamingExampleClient interface {
	Recv() (*ResponseMessage, error)
	grpc.ClientStream
}

type streamingServiceServerStreamingExampleClient struct {
	grpc.ClientStream
}

func (x *streamingServiceServerStreamingExampleClient) Recv() (*ResponseMessage, error) {
	m := new(ResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingServiceClient) ClientStreamingExample(ctx context.Context, opts ...grpc.CallOption) (StreamingService_ClientStreamingExampleClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[1], "/gRPCGreet.StreamingService/ClientStreamingExample", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceClientStreamingExampleClient{stream}
	return x, nil
}

type StreamingService_ClientStreamingExampleClient interface {
	Send(*RequestMessage) error
	CloseAndRecv() (*ResponseMessage, error)
	grpc.ClientStream
}

type streamingServiceClientStreamingExampleClient struct {
	grpc.ClientStream
}

func (x *streamingServiceClientStreamingExampleClient) Send(m *RequestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingServiceClientStreamingExampleClient) CloseAndRecv() (*ResponseMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamingServiceClient) BidirectionalStreamingExample(ctx context.Context, opts ...grpc.CallOption) (StreamingService_BidirectionalStreamingExampleClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamingService_ServiceDesc.Streams[2], "/gRPCGreet.StreamingService/BidirectionalStreamingExample", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceBidirectionalStreamingExampleClient{stream}
	return x, nil
}

type StreamingService_BidirectionalStreamingExampleClient interface {
	Send(*RequestMessage) error
	Recv() (*ResponseMessage, error)
	grpc.ClientStream
}

type streamingServiceBidirectionalStreamingExampleClient struct {
	grpc.ClientStream
}

func (x *streamingServiceBidirectionalStreamingExampleClient) Send(m *RequestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingServiceBidirectionalStreamingExampleClient) Recv() (*ResponseMessage, error) {
	m := new(ResponseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingServiceServer is the server API for StreamingService service.
// All implementations must embed UnimplementedStreamingServiceServer
// for forward compatibility
type StreamingServiceServer interface {
	UnaryExample(context.Context, *RequestMessage) (*ResponseMessage, error)
	ServerStreamingExample(*RequestMessage, StreamingService_ServerStreamingExampleServer) error
	ClientStreamingExample(StreamingService_ClientStreamingExampleServer) error
	BidirectionalStreamingExample(StreamingService_BidirectionalStreamingExampleServer) error
	mustEmbedUnimplementedStreamingServiceServer()
}

// UnimplementedStreamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamingServiceServer struct {
}

func (UnimplementedStreamingServiceServer) UnaryExample(context.Context, *RequestMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryExample not implemented")
}
func (UnimplementedStreamingServiceServer) ServerStreamingExample(*RequestMessage, StreamingService_ServerStreamingExampleServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingExample not implemented")
}
func (UnimplementedStreamingServiceServer) ClientStreamingExample(StreamingService_ClientStreamingExampleServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingExample not implemented")
}
func (UnimplementedStreamingServiceServer) BidirectionalStreamingExample(StreamingService_BidirectionalStreamingExampleServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingExample not implemented")
}
func (UnimplementedStreamingServiceServer) mustEmbedUnimplementedStreamingServiceServer() {}

// UnsafeStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamingServiceServer will
// result in compilation errors.
type UnsafeStreamingServiceServer interface {
	mustEmbedUnimplementedStreamingServiceServer()
}

func RegisterStreamingServiceServer(s grpc.ServiceRegistrar, srv StreamingServiceServer) {
	s.RegisterService(&StreamingService_ServiceDesc, srv)
}

func _StreamingService_UnaryExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamingServiceServer).UnaryExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPCGreet.StreamingService/UnaryExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamingServiceServer).UnaryExample(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamingService_ServerStreamingExample_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamingServiceServer).ServerStreamingExample(m, &streamingServiceServerStreamingExampleServer{stream})
}

type StreamingService_ServerStreamingExampleServer interface {
	Send(*ResponseMessage) error
	grpc.ServerStream
}

type streamingServiceServerStreamingExampleServer struct {
	grpc.ServerStream
}

func (x *streamingServiceServerStreamingExampleServer) Send(m *ResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamingService_ClientStreamingExample_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServiceServer).ClientStreamingExample(&streamingServiceClientStreamingExampleServer{stream})
}

type StreamingService_ClientStreamingExampleServer interface {
	SendAndClose(*ResponseMessage) error
	Recv() (*RequestMessage, error)
	grpc.ServerStream
}

type streamingServiceClientStreamingExampleServer struct {
	grpc.ServerStream
}

func (x *streamingServiceClientStreamingExampleServer) SendAndClose(m *ResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingServiceClientStreamingExampleServer) Recv() (*RequestMessage, error) {
	m := new(RequestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamingService_BidirectionalStreamingExample_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServiceServer).BidirectionalStreamingExample(&streamingServiceBidirectionalStreamingExampleServer{stream})
}

type StreamingService_BidirectionalStreamingExampleServer interface {
	Send(*ResponseMessage) error
	Recv() (*RequestMessage, error)
	grpc.ServerStream
}

type streamingServiceBidirectionalStreamingExampleServer struct {
	grpc.ServerStream
}

func (x *streamingServiceBidirectionalStreamingExampleServer) Send(m *ResponseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingServiceBidirectionalStreamingExampleServer) Recv() (*RequestMessage, error) {
	m := new(RequestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingService_ServiceDesc is the grpc.ServiceDesc for StreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPCGreet.StreamingService",
	HandlerType: (*StreamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryExample",
			Handler:    _StreamingService_UnaryExample_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingExample",
			Handler:       _StreamingService_ServerStreamingExample_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingExample",
			Handler:       _StreamingService_ClientStreamingExample_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingExample",
			Handler:       _StreamingService_BidirectionalStreamingExample_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streaming.proto",
}
